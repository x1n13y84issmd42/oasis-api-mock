openapi: 3.0.1
info:
  title: OASIS Mock API
  description: 'This is a mock of an API used to develop & test the OASIS, an application
    to automatically test APIs using Open API Spec definition files. '
  contact:
    url: https://github.com/x1n13y84issmd42/oasis
  version: 1.0.0
servers:
- url: http://localhost
  description: Localhost
paths:
  /api/public/primitive/string:
    get:
      summary: Get string
      description: Responds with a single string.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: string
  /api/public/primitive/number:
    get:
      summary: Get number
      description: Responds with a single random number.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: number
  /api/public/primitive/boolean:
    get:
      summary: Get boolean
      description: Responds with a single random boolean.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: boolean
  /api/public/primitive/time:
    get:
      summary: Get time
      description: Responds with a string in time format.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: string
  /api/public/primitive/date:
    get:
      summary: Get date
      description: Responds with a single random Date.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                format: date
  /api/public/primitive/datetime:
    get:
      summary: Get date & time
      description: Responds with a string in DateTime format.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                format: date-time
  /api/public/array/strings:
    get:
      summary: List strings
      description: Responds with an array of strings.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/public/array/numbers:
    get:
      summary: List numbers
      description: Responds with an array of numbers.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
  /api/public/array/users:
    get:
      summary: List users
      description: Responds with an array of User objects.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/public/array/users/fail:
    get:
      summary: List users failing
      description: Responds with an array of malformed User objects.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/public/object/user/{UID}:
    get:
      summary: Single user
      description: Responds wih a single User object.
      parameters:
      - name: UID
        in: path
        description: An ID of a user to retrieve
        required: true
        schema:
          type: string
        example: "345"
      responses:
        200:
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/public/object/user/{UID}/fail:
    get:
      summary: Single user failing
      description: Responds wih a malformed single User object.
      parameters:
      - name: UID
        in: path
        description: An ID of a user to retrieve
        required: true
        schema:
          type: string
        example: "345"
      responses:
        200:
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/public/array/visits:
    get:
      summary: List visits
      description: Responds with an array of objects defined inline.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                  - IP
                  - counter
                  - createdAt
                  type: object
                  properties:
                    createdAt:
                      type: string
                      format: date-time
                    IP:
                      type: string
                    counter:
                      type: number
  /api/public/array/visits/fail:
    get:
      summary: List visits failing
      description: Responds with an array of objects defined inline, but malformed.
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                  - IP
                  - counter
                  - createdAt
                  type: object
                  properties:
                    createdAt:
                      type: string
                      format: date-time
                    IP:
                      type: string
                    counter:
                      type: number
  /meta/headers/redirect:
    get:
      summary: Redirect
      description: Responds with an HTTP Location header.
      operationId: get-meta-headers-redirect
      responses:
        302:
          description: Status 302
          headers:
            Location:
              schema:
                type: string
          content: {}
  /meta/headers/pragma:
    get:
      summary: Pragma headers
      description: Responds with an HTTP Pragma header containing multiple values.
      operationId: get-meta-headers-pragma
      responses:
        200:
          description: Status 200
          headers:
            Pragma:
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                type: number
                description: Responds with a single number.
  /meta/headers/echo:
    get:
      summary: Meta headers echo
      description: Expects few HTTP headers in response and echoes their values back
        as JSON.
      operationId: get-meta-headers-echo
      parameters:
      - name: X-Oasis-Foo
        in: header
        required: true
        schema:
          type: string
        example: 7H3-F00
      - name: X-Oasis-Bar
        in: header
        schema:
          type: string
        example: 7H3-B4R
      responses:
        200:
          description: Status 200
          headers:
            Pragma:
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                required:
                - bar
                - foo
                type: object
                properties:
                  bar:
                    type: string
                  foo:
                    type: string
                description: Echoes back the values of the `X-Oasis-Foo` & `X-Oasis-Bar`
                  headers as JSON. Also as Pragma headers.
  /meta/query/echo:
    get:
      summary: Query echo
      description: Responds with an HTTP Pragma header containing multiple values.
      operationId: get-meta-query-echo
      parameters:
      - name: the_foo
        in: query
        description: The Foo query string parameter
        required: true
        schema:
          type: string
        example: f00
      - name: the_bar
        in: query
        description: The Bar query parameter.
        required: true
        schema:
          type: string
        example: b4r
      responses:
        200:
          description: Status 200
          headers:
            Pragma:
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                type: number
                description: Responds with a single number.
  /x/meta/query/echo:
    get:
      summary: X Query echo
      description: This operation has no examples to use for requests, and must trigger
        an error in Oasis.
      operationId: x-get-meta-query-echo
      parameters:
      - name: the_foo
        in: query
        description: The Foo query string parameter, no example.
        required: true
        schema:
          type: string
      - name: the_bar
        in: query
        description: The Bar query parameter, no example.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Status 200
          headers:
            Pragma:
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                type: number
                description: Responds with a single number.
  /x/meta/path/{UID}:
    get:
      summary: X Path
      description: This operation has no examples to use for requests, and must trigger
        an error in Oasis.
      operationId: x-get-meta-path
      parameters:
      - name: UID
        in: path
        description: A User ID to use, without an example.
        required: true
        schema:
          type: string
      - name: the_foo
        in: query
        description: The Foo query string parameter
        required: true
        schema:
          type: string
      - name: the_bar
        in: query
        description: The Bar query parameter.
        required: true
        schema:
          type: string
      responses:
        200:
          description: Status 200
          content:
            application/json:
              schema:
                type: number
                description: Responds with a single number.
  /x/meta/headers/echo:
    get:
      summary: X Meta headers echo
      description: Expects few HTTP headers in request and echoes their values back
        as JSON. Although has no example values for the headers.
      operationId: x-get-meta-headers-echo
      parameters:
      - name: X-Oasis-Foo
        in: header
        required: true
        schema:
          type: string
      - name: X-Oasis-Bar
        in: header
        schema:
          type: string
      responses:
        200:
          description: Status 200
          headers:
            Pragma:
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                required:
                - bar
                - foo
                type: object
                properties:
                  bar:
                    type: string
                  foo:
                    type: string
                description: Echoes back the values of the `X-Oasis-Foo` & `X-Oasis-Bar`
                  headers as JSON. Also as Pragma headers.
components:
  schemas:
    User:
      required:
      - createdAt
      - email
      - name
      - token
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date
        token:
          type: string
      example: "{\r\n\"name\": \"Seamus Gulgowski\",\r\n\"email\": \"Eldridge87@hotmail.com\"\
        ,\r\n\"createdAt\": \"2019-03-01T21:58:16.596Z\",\r\n\"token\": \"f5f8cf46-7ed9-465c-827a-3c39470b178b\"\
        \r\n}"
